// Generated by CoffeeScript 1.6.3
var Image, MatchImageMarkDown, MatchImageUrl, Source, async, escapeRegExp, file, makeLoaderCallback, makeWorker;

file = require('hexo-fs');

Image = require('./MarkdownImage');

async = require('async');

MatchImageUrl = function(url) {
  var m, optional, p, re1, re2, re3, re4, re5;
  re1 = '(.*?)';
  re2 = '( )';
  re3 = '(")';
  re4 = '(.*?)';
  re5 = '(")';
  p = new RegExp(re1 + re2 + re3 + re4 + re5, ["i"]);
  m = p.exec(url);
  if (m != null) {
    url = m[1];
    optional = m[4];
    return [url, optional];
  }
  return [url, null];
};

MatchImageMarkDown = function(src) {
  var alt_, ex, item, items, m, p, r, re1, re2, re3, re4, re5, re6, re7, rest, _ref;
  re1 = '(!)';
  re2 = '(\\[)';
  re3 = '(.*?)';
  re4 = '(\\])';
  re5 = '(\\()';
  re6 = '(.*?)';
  re7 = '(\\))';
  ex = re1 + re2 + re3 + re4 + re5 + re6 + re7;
  p = new RegExp(ex, ["gim"]);
  items = new Array();
  while ((m = p.exec(src)) != null) {
    alt_ = m[3];
    rest = m[6];
    r = MatchImageUrl(rest);
    if (((_ref = r[0]) != null ? _ref.indexOf("{{BASE_PATH}}") : void 0) === 0) {
      continue;
    }
    item = new Image(alt_, r[0], r[1]);
    items.push(item);
  }
  return items;
};

makeWorker = function(img, folder) {
  return function(callback) {
    return img.download(folder, callback);
  };
};

makeLoaderCallback = function(source, callback) {
  return function(err, src) {
    if (err != null) {
      return callback(err);
    }
    if (src == null) {
      return callback(new Error("Null source."));
    }
    source.src = src;
    source.images = MatchImageMarkDown(src);
    return callback(null, source);
  };
};

escapeRegExp = function(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
};

module.exports = Source = (function() {
  function Source(path) {
    this.path = path;
    this.src = "";
    this.images = [];
  }

  Source.prototype.load = function(callback) {
    return file.readFile(this.path, null, makeLoaderCallback(this, callback));
  };

  Source.prototype.update = function(callback) {
    var d, img, newSrc, r, that, timestamp, _i, _len, _ref,
      _this = this;
    newSrc = this.src;
    _ref = this.images;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      img = _ref[_i];
      if (img.skipped) {
        continue;
      }
      r = new RegExp(escapeRegExp(img.url, "g"));
      newSrc = newSrc.replace(r, "/images/" + img.localPath);
    }
    d = new Date();
    timestamp = d.toISOString().replace(/:/g, "-");
    that = this;
    return file.writeFile("" + this.path + "." + timestamp + ".bak", this.src, function(err) {
      if (err != null) {
        console.log("Fail to backup " + _this.path);
      }
      return file.writeFile(_this.path, newSrc, function(err) {
        if (err != null) {
          return typeof callback === "function" ? callback(err, that) : void 0;
        } else {
          return typeof callback === "function" ? callback(null, that) : void 0;
        }
      });
    });
  };

  return Source;

})();
